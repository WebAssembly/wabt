;;; TOOL: run-objdump
;;; ARGS0: --enable-annotations --enable-code-metadata
;;; ARGS1: -x -j "metadata.code.instr_freq"
(module
  (type $sig (func (result i32)))
  (func $helper (type $sig) (result i32) i32.const 42)

  (func $main (param i32) (result i32)
    ;; Hot loop - high frequency (freq 256 -> binary 40)
    (loop $hot_loop (result i32)
      (@metadata.code.instr_freq (freq 256))
      local.get 0
      i32.const 1
      i32.sub
      local.tee 0
      i32.eqz
      if (result i32)
        i32.const 0
      else
        ;; Hot call inside loop - very high frequency (freq 1024 -> binary 42)
        (@metadata.code.instr_freq (freq 1024))
        call $helper
        drop
        br $hot_loop
      end
    )
    drop

    ;; Cold path - low frequency (freq 0.25 -> binary 30)
    local.get 0
    i32.const 100
    i32.gt_s
    if
      (@metadata.code.instr_freq (freq 0.25))
      call $helper
      drop
    end

    ;; Never optimize call (binary "\00")
    local.get 0
    i32.const 1000
    i32.gt_s
    if
      (@metadata.code.instr_freq never_opt)
      call $helper
      drop
    end

    ;; Always optimize call (binary "\7f")
    (@metadata.code.instr_freq always_opt)
    call $helper
    drop

    ;; Binary representation example (freq 16 -> binary "\24")
    (@metadata.code.instr_freq "\24")
    call $helper
  )
  (export "main" (func $main))
)
(;; STDOUT ;;;
compilation-hint-instr-freq.wasm:	file format wasm 0x1

Section Details:

Custom:
 - name: "metadata.code.instr_freq"
   - func[1] <main>:
    - meta[3]:
     - 0000000: 28                                       (
    - meta[10]:
     - 0000000: 2a                                       *
    - meta[20]:
     - 0000000: 1e                                       .
    - meta[2c]:
     - 0000000: 00                                       .
    - meta[30]:
     - 0000000: 7f                                       .
    - meta[33]:
     - 0000000: 24                                       $

Code Disassembly:

000057 func[0]:
 000058: 41 2a                      | i32.const 42
 00005a: 0b                         | end
00005c func[1] <main>:
 00005d: 03 7f                      | loop i32
 00005f: 20 00                      |   local.get 0
 000061: 41 01                      |   i32.const 1
 000063: 6b                         |   i32.sub
 000064: 22 00                      |   local.tee 0
 000066: 45                         |   i32.eqz
 000067: 04 7f                      |   if i32
 000069: 41 00                      |     i32.const 0
 00006b: 05                         |   else
 00006c: 10 00                      |     call 0
 00006e: 1a                         |     drop
 00006f: 0c 01                      |     br 1
 000071: 0b                         |   end
 000072: 0b                         | end
 000073: 1a                         | drop
 000074: 20 00                      | local.get 0
 000076: 41 e4 00                   | i32.const 100
 000079: 4a                         | i32.gt_s
 00007a: 04 40                      | if
 00007c: 10 00                      |   call 0
 00007e: 1a                         |   drop
 00007f: 0b                         | end
 000080: 20 00                      | local.get 0
 000082: 41 e8 07                   | i32.const 1000
 000085: 4a                         | i32.gt_s
 000086: 04 40                      | if
 000088: 10 00                      |   call 0
 00008a: 1a                         |   drop
 00008b: 0b                         | end
 00008c: 10 00                      | call 0
 00008e: 1a                         | drop
 00008f: 10 00                      | call 0
 000091: 0b                         | end
